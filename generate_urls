#!/usr/bin/env perl
## Ah, c'mon. I never get to use Perl anymore nowadays!
#
# Loads all obvious URLS from google's library listing.
#
# Use as:
# curl -s https://developers.google.com/speed/libraries/devguide | ./generate_urls > urls
#
use strict;
use warnings FATAL=>'all';
use LWP::UserAgent;
use URI;
local $/ = undef;
local $\ = "\n";

# given "1.2.3" will return "1", "1.2", "1.2.3")
sub version_variations($) {
    my $version = shift;
    my @chunks = ();
    my $v = "";
    for (split /\./, $version) {
        $v .= "." if @chunks;
        $v .= $_;
        push @chunks, $v;
    }
    return @chunks;
}


sub absurl($$) {
    my $base = shift;
    my $file = shift;
    my $fullurl = URI->new_abs($file, "http://" . $base);
    $fullurl =~ s|^http://||;
    return $fullurl;
}

# simple cached http get.
my %getcache;
sub get($) {
    my $url = shift;
    return $getcache{$url} if exists $getcache{$url};

    my $ua = LWP::UserAgent->new;
    # $ua->agent("MyApp/0.1 ");
    my $res = $ua->get("http://" . $url);
    my $content = "";
    if ($res->is_success) { $content = $res->content };
    $getcache{$url} = $content;
    return $content;
}

# Load a CSS file and find all images linked in there.
sub css_resources($) {
    my $url = shift;

    my $content = get($url);
    return () if not $content;

    my @res;
    while ($content =~ /url\(["']?(.*?)["']?\)/g) {
        next if $1 =~ /^data:/;
        push @res, absurl($url, $1);
    }
    return @res;
}


my %libs;
my $html = <>;
# The page isn't valid XML, so some simple regexes to find the libraries will do.
while ($html =~ m|<dl>(.*?)</dl>|sg) {
    my $lib = $1;
    my ($title) = ($lib =~ m|<dt>(.*?)</dt>|);
    next if not $title;
    #print("$title\n");

    my ($baseurl) = ($lib =~ m|src="//(ajax.googleapis.com/ajax/libs/.*?)"|);
    $baseurl =~ s|\d[\d.]+|XXXX|; # version number changes in the base url.
    while ($lib =~ m|<span class="versions">(.*?)</span>|sg) {
        for my $version (split /,/, $1) {
            $version =~ s/\s//g;
            #print(" $title: -$version\n");
            my $url = $baseurl;
            $url =~ s/XXXX/$version/;
            # $libs{$title}{$version} = $url;
            # version "1.2.3" will also be available as "1.2" and "1".
            # Note: not every library has all versions available.
            for my $big_v (version_variations($version)) {
                if (not exists $libs{$title}{$big_v}) {
                    my $url = $baseurl;
                    $url =~ s/XXXX/$big_v/;
                    my $page = get($url);
                    next if not $page;
                    print $url;
                    $libs{$title}{$big_v} = 1;

                    ## Some js can have a .map file
                    if ($page =~ /sourceMappingURL=([\w.]+)/) {
                        print absurl($url, $1);
                    }
                }
            }
        }
    }
}

## Special cases.
# CSS for jQuery Mobile
for my $v (keys $libs{"jQuery Mobile"}) {
    my $url = "ajax.googleapis.com/ajax/libs/jquerymobile/$v/jquery.mobile.min.css";
    print($url);
    local $\ = undef;
    print(map $_ . "\n", css_resources($url));
}
# jQuery themes
# ... and all the images they need :/
#

# script.aculo.us
for my $v (keys $libs{"script.aculo.us"}) {
    local $\ = undef;
    print <<HERE
ajax.googleapis.com/ajax/libs/scriptaculous/$v/builder.js
ajax.googleapis.com/ajax/libs/scriptaculous/$v/controls.js
ajax.googleapis.com/ajax/libs/scriptaculous/$v/dragdrop.js
ajax.googleapis.com/ajax/libs/scriptaculous/$v/effects.js
ajax.googleapis.com/ajax/libs/scriptaculous/$v/slider.js
ajax.googleapis.com/ajax/libs/scriptaculous/$v/sound.js
HERE
}
