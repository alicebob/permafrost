#!/usr/bin/env perl
# Mirrors ajax.googleapis.com in ./pool/.
#
# Use as:
#   ./generate_urls
#
use strict;
use warnings FATAL=>'all';
use LWP::UserAgent;
use URI;
use File::Path qw(make_path);

my $UA = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36";
local $\ = "\n";

my $pooldir = $ENV{"POOLDIR"} || "./pool";

# given "1.2.3" will return ("1", "1.2", "1.2.3")
sub version_variations($) {
    my $version = shift;
    my @chunks = ();
    my @components = ();
    for (split /\./, $version) {
        push @components, $_;
        push @chunks, join ".", @components;
    }
    return @chunks;
}


# simple http get. Returns undef on error or if we loaded it before.
my %getcache;
sub get($) {
    my $url = shift;
    $url = "http:$url" if $url =~ m|^//|;
    return if exists $getcache{$url};
    $getcache{$url} = 1;

    my $ua = LWP::UserAgent->new;
    $ua->agent($UA);
    my $res = $ua->get($url);
    return if not $res->is_success;
    return $res->content;
}

sub mirror($) {
    my $url = shift;
    my $content = get($url);
    return if not $content;
    $url =~ m|ajax.googleapis.com/ajax/libs/(.*/)([^/]+)$|;
    my $path = "$pooldir/$1";
    my $filename = $2;
    make_path($path) or die "Can't make_path: $!" if ! -e $path;
    open(my $fh, ">", $path . $filename) or die "Can't open file: $!";
    $fh->write($content);
    $fh->close();
    return $content;
}

# Load a CSS file and find all images linked in there.
sub css_resources($$) {
    my $url = shift;
    my $content = shift;

    return () if not $content;

    my @res;
    while ($content =~ /url\(["']?(.*?)["']?\)/g) {
        next if $1 =~ /^data:/;
        push @res, URI->new_abs($1, $url);
    }
    return @res;
}


my $devguide = get("https://developers.google.com/speed/libraries/devguide");
die "Can't load library overview" if not $devguide;

my %libs;
# The page isn't valid XML, so some simple regexes to find the libraries will do.
while ($devguide =~ m|<dl>(.*?)</dl>|sg) {
    my $lib = $1;
    my ($title) = ($lib =~ m|<dt>(.*?)</dt>|);
    next if not $title;
    print("$title");

    my ($baseurl) = ($lib =~ m|src="(//ajax.googleapis.com/ajax/libs/.*?)"|);
    $baseurl =~ s|\d[\d.]+|XXXX|; # version number changes in the base url.
    while ($lib =~ m|<span class="versions">(.*?)</span>|sg) {
        for my $version (split /,/, $1) {
            $version =~ s/\s//g;
            my $url = $baseurl;
            $url =~ s/XXXX/$version/;
            # version "1.2.3" might also be available as "1.2" and "1".
            # Note: not every library has all versions available.
            for my $big_v (version_variations($version)) {
                if (not exists $libs{$title}{$big_v}) {
                    my $url = $baseurl;
                    $url =~ s/XXXX/$big_v/;
                    my $page = mirror($url);
                    next if not $page;
                    $libs{$title}{$big_v} = 1;
                    print(" $title: $big_v");

                    # Some js files have a .map file
                    if ($page =~ /sourceMappingURL=([\w.]+)/) {
                        mirror(URI->new_abs($1, $url));
                    }
                }
            }
        }
    }
}

## Special cases.
# CSS for jQuery Mobile
for my $v (keys $libs{"jQuery Mobile"}) {
    my $url = "//ajax.googleapis.com/ajax/libs/jquerymobile/$v/jquery.mobile.min.css";
    my $css = mirror($url);
    mirror($_) for css_resources($url, $css);
}
# jQuery themes
# ... and all the images they need :/
#

# script.aculo.us
for my $v (keys $libs{"script.aculo.us"}) {
    for my $file (qw'builder controls dragdrop effects slider sound') {
        mirror("//ajax.googleapis.com/ajax/libs/scriptaculous/$v/$file.js");
    }
}
